Program([ClassDecl(Id(mainClass),[MethodDecl(Id($getline),Static,[param(Id(a),StringType)],Block([AssignStmt(Id(test),CallExpr(Id(system),Id(getIO),[])),AssignStmt(Id(a),StringLit()),For(Id(i),IntLit(1),BinaryOp(+,Id(a),Id(b)),IntLit(1),Block([AssignStmt(Id(a),BinaryOp(+.,Id(a),Id(test))),AssignStmt(Id(test),CallExpr(Id(system),Id(getIO),[])),If(BinaryOp(==,Id(test),StringLit(\n)),Block([Break]),Block([Continue]))])])])),MethodDecl(Id($fflush),Static,[param(Id(s),ClassType(Id(typeIO)))],Block([If(BinaryOp(==,Id(s),Id(stdin)),Block([Call(Id(system),Id(clear_console),[])]))])),MethodDecl(Id($main),Static,[],Block([Call(Id(io),Id(print),[StringLit(Enter number of Students? )]),Call(Id(io),Id(getInt),[Id(n)]),Call(Id(io),Id(print),[BinaryOp(+.,StringLit(Input details for Student ),StringLit(:\n))]),Call(Id(students),Id(push),[NewExpr(Id(Student),[Id(ID),Id(name)])]),Return(IntLit(0))]))])])