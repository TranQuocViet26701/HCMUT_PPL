Program([ClassDecl(Id(testData),Id(PPL),[MethodDecl(Id($loopTest),Static,[param(Id(a),IntType),param(Id(v),IntType),param(Id(c),FloatType),param(Id(d),FloatType),param(Id(a),BoolType),param(Id(s),BoolType),param(Id(str1),StringType),param(Id(str2),StringType),param(Id(r1),ClassType(Id(Room))),param(Id(r2),ClassType(Id(Room)))],Block([For(Id(i),BinaryOp(==,BinaryOp(-,BinaryOp(+,Id(a),Id(c)),Id(d)),Id(f)),BinaryOp(+,Id(a),BinaryOp(/,BinaryOp(>=,Id(a),Id(d)),IntLit(32))),BinaryOp(-,IntLit(10),IntLit(5)),Block([])])])),MethodDecl(Id(loopTest),Instance,[param(Id(a),IntType),param(Id(v),IntType),param(Id(c),FloatType),param(Id(d),FloatType),param(Id(a),BoolType),param(Id(s),BoolType),param(Id(str1),StringType),param(Id(str2),StringType),param(Id(r1),ClassType(Id(Room))),param(Id(r2),ClassType(Id(Room)))],Block([For(Id(i),BinaryOp(==,BinaryOp(-,BinaryOp(+,Id(a),Id(c)),Id(d)),Id(f)),BinaryOp(+,Id(a),BinaryOp(/,BinaryOp(>=,Id(a),Id(d)),IntLit(32))),BinaryOp(-,IntLit(10),IntLit(5)),Block([If(BinaryOp(>,Id(a),BinaryOp(-,Id(f),IntLit(1))),Block([Break]),Block([Continue]))])])]))])])